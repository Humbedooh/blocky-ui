// Generated by CoffeeScript 1.9.3
var API, app, banRules, cog, fetch, get, globArgs, isArray, loadDashboard, loadRules, mk, oldPopup, popup, post, postJSON, renderDashboard, renderRules, set, showHide, sortTable, swi, txt;

loadRules = function() {
  return fetch("./api/rules.lua", null, renderRules);
};

banRules = [];

renderRules = function(json) {
  var item, l, len, li, main, ref, ul;
  main = get('bread');
  app(main, mk('a', {
    style: "font-size: 2rem;",
    href: "javascript:void(addRule());"
  }, "Add a new rule"));
  app(main, mk('br'));
  if (isArray(json.rules)) {
    banRules = json.rules;
    app(main, mk('h3', {}, "Current rules:"));
    ul = mk('ul');
    ref = json.rules;
    for (l = 0, len = ref.length; l < len; l++) {
      item = ref[l];
      li = mk('li', {}, item.name);
      app(ul, li);
    }
    return app(main, ul);
  }
};

loadDashboard = function(howMany) {
  return fetch("./api/dashboard.lua" + (howMany ? '?hits=' + howMany : ''), null, renderDashboard);
};

renderDashboard = function(json) {
  var h2, howMany, ip, l, len, li, main, ref, renewDate, ul;
  main = get('bread');
  h2 = mk('h2', {}, "Currently " + json.banned + " IP" + (json.banned !== 1 ? 's' : '') + " banned, " + json.whitelisted + " IP" + (json.whitelisted !== 1 ? 's' : '') + " whitelisted.");
  app(main, h2);
  if (isArray(json.banlist) && json.banlist.length > 0) {
    ul = mk('ul');
    ref = json.banlist;
    for (l = 0, len = ref.length; l < len; l++) {
      ip = ref[l];
      renewDate = new Date(ip.epoch * 1000.0).toUTCString();
      li = mk('li', {}, ip.ip + ": " + ip.reason + " - Ban last renewed renewed + " + renewDate);
      app(ul, li);
    }
    app(main, ul);
    if (json.banlist.length < json.banned) {
      howMany = (parseInt(json.banlist.Length / 20) + 1) * 20;
      return app(main, mk('a', {
        href: "javascript:void(loadDashboard(" + howMany + "));"
      }, "Show more..."));
    }
  }
};

API = 1;

oldPopup = false;

popup = function(title, body) {
  var d, div, p;
  if (oldPopup) {
    p = get('popupdiv');
    if (!p) {
      d = mk('div');
      set(d, 'id', 'popupdiv');
      set(d, 'title', title);
      p = mk('p');
      app(d, mk('img', {
        style: "margin: 0 auto;",
        src: "images/logo.png",
        width: "128",
        height: "128"
      }));
      app(p, txt(body));
      app(d, p);
      document.body.appendChild(d);
    }
    return $('#popupdiv').dialog();
  } else {
    document.body.innerHTML = "";
    div = mk('div', {
      style: 'text-align: center; margin-top: 20px;'
    });
    app(div, mk('img', {
      src: 'images/logo.png',
      width: '128',
      height: '128',
      style: 'margin: 0 auto;'
    }));
    app(div, mk('br'));
    app(div, mk('h1', {
      "class": 'error-number'
    }, title));
    app(div, mk('h2', {}, body));
    return app(document.body, div);
  }
};

Number.prototype.pretty = function(fix) {
  if (fix) {
    return String(this.toFixed(fix)).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
  }
  return String(this.toFixed(0)).replace(/(\d)(?=(\d{3})+$)/g, '$1,');
};

fetch = function(url, xstate, callback, snap) {
  var xmlHttp;
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlHttp.withCredentials = true;
  if (location.href.match(/^file:/)) {
    url = "https://papersplease.online" + url;
  }
  xmlHttp.open("GET", url, true);
  xmlHttp.send(null);
  return xmlHttp.onreadystatechange = function(state) {
    var e, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (response && response.loginRequired) {
            location.href = "/oauth.html";
            return;
          }
          return callback(response, xstate);
        } catch (_error) {
          e = _error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

post = function(url, args, xstate, callback, snap) {
  var ar, fdata, k, v, xmlHttp;
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlHttp.withCredentials = true;
  ar = [];
  for (k in args) {
    v = args[k];
    if (v && v !== "") {
      ar.push(k + "=" + escape(v));
    }
  }
  fdata = ar.join("&");
  xmlHttp.open("POST", url, true);
  xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xmlHttp.send(fdata);
  return xmlHttp.onreadystatechange = function(state) {
    var e, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          return callback(response, xstate);
        } catch (_error) {
          e = _error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

postJSON = function(url, json, xstate, callback, snap) {
  var fdata, xmlHttp;
  xmlHttp = null;
  if (window.XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlHttp.withCredentials = true;
  fdata = JSON.stringify(json);
  xmlHttp.open("POST", url, true);
  xmlHttp.setRequestHeader("Content-type", "application/json");
  xmlHttp.send(fdata);
  return xmlHttp.onreadystatechange = function(state) {
    var e, response;
    if (xmlHttp.readyState === 4 && xmlHttp.status === 500) {
      if (snap) {
        snap(xstate);
      }
    }
    if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
      if (callback) {
        try {
          response = JSON.parse(xmlHttp.responseText);
          if (response && response.loginRequired) {
            location.href = "/oauth.html";
            return;
          }
          return callback(response, xstate);
        } catch (_error) {
          e = _error;
          return callback(JSON.parse(xmlHttp.responseText), xstate);
        }
      }
    }
  };
};

mk = function(t, s, tt) {
  var k, l, len, r, v;
  r = document.createElement(t);
  if (s) {
    for (k in s) {
      v = s[k];
      if (v) {
        r.setAttribute(k, v);
      }
    }
  }
  if (tt) {
    if (typeof tt === "string") {
      app(r, txt(tt));
    } else {
      if (isArray(tt)) {
        for (l = 0, len = tt.length; l < len; l++) {
          k = tt[l];
          if (typeof k === "string") {
            app(r, txt(k));
          } else {
            app(r, k);
          }
        }
      } else {
        app(r, tt);
      }
    }
  }
  return r;
};

app = function(a, b) {
  var item, l, len, results;
  if (isArray(b)) {
    results = [];
    for (l = 0, len = b.length; l < len; l++) {
      item = b[l];
      if (typeof item === "string") {
        item = txt(item);
      }
      results.push(a.appendChild(item));
    }
    return results;
  } else {
    return a.appendChild(b);
  }
};

set = function(a, b, c) {
  return a.setAttribute(b, c);
};

txt = function(a) {
  return document.createTextNode(a);
};

get = function(a) {
  return document.getElementById(a);
};

swi = function(obj) {
  var switchery;
  return switchery = new Switchery(obj, {
    color: '#26B99A'
  });
};

cog = function(div, size) {
  var i, idiv;
  if (size == null) {
    size = 200;
  }
  idiv = document.createElement('div');
  idiv.setAttribute("class", "icon");
  idiv.setAttribute("style", "text-align: center; vertical-align: middle; height: 500px;");
  i = document.createElement('i');
  i.setAttribute("class", "fa fa-spin fa-cog");
  i.setAttribute("style", "font-size: " + size + "pt !important; color: #AAB;");
  idiv.appendChild(i);
  idiv.appendChild(document.createElement('br'));
  idiv.appendChild(document.createTextNode('Loading, hang on tight..!'));
  div.innerHTML = "";
  return div.appendChild(idiv);
};

globArgs = {};

isArray = function(value) {
  return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
};

Array.prototype.remove = function(a) {
  var i, item, l, len;
  for (i = l = 0, len = this.length; l < len; i = ++l) {
    item = this[i];
    if (item === a) {
      this.splice(i, 1);
      break;
    }
  }
  return this;
};

showHide = function(id, caller) {
  var obj;
  obj = get(id);
  if (obj) {
    if (caller) {
      obj.style.left = (caller.getBoundingClientRect().left + document.body.scrollLeft + document.documentElement.scrollLeft) + "px";
      obj.style.top = (2 + caller.getBoundingClientRect().bottom + document.body.scrollTop + document.documentElement.scrollTop) + "px";
      obj.style.position = "absolute";
      obj.style.zIndex = "200";
      obj.style.background = "#EEE";
    }
    return obj.style.display = obj.style.display === 'none' ? 'block' : 'none';
  }
};

sortTable = function(tbody, col, asc) {
  var arr, cell, elem, i, j, k, l, len, len1, len2, len3, m, n, nasc, o, ref, results, rlen, row, rows;
  rows = tbody.childNodes;
  rlen = rows.length;
  arr = [];
  nasc = tbody.getAttribute("sort_" + col);
  if (nasc) {
    asc = parseInt(nasc);
  }
  nasc = asc * -1;
  tbody.setAttribute("sort_" + col, nasc);
  for (i = l = 0, len = rows.length; l < len; i = ++l) {
    row = rows[i];
    elem = {
      cells: [],
      dom: row
    };
    ref = row.childNodes;
    for (j = m = 0, len1 = ref.length; m < len1; j = ++m) {
      cell = ref[j];
      elem.cells.push(parseFloat(cell.innerText) || cell.innerText.toLowerCase());
    }
    arr.push(elem);
  }
  for (n = 0, len2 = rows.length; n < len2; n++) {
    k = rows[n];
    try {
      tbody.removeChild(k);
    } catch (_error) {

    }
  }
  arr.sort(function(a, b) {
    var rv;
    rv = a.cells[col] === b.cells[col] ? 0 : (a.cells[col] > b.cells[col] ? asc : -1 * asc);
    return rv;
  });
  results = [];
  for (o = 0, len3 = arr.length; o < len3; o++) {
    row = arr[o];
    results.push(tbody.appendChild(row.dom));
  }
  return results;
};
